{"version":3,"sources":["components/ProductDetails.jsx","components/Navbar.jsx","App.js","serviceWorker.js","components/StateProvider.js","components/reducer.js","index.js"],"names":["ProductDetails","className","Navbar","id","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","path","exact","component","Boolean","window","location","hostname","match","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","state","action","type","brandFiltersArray","item","label","filter","element","tagFiltersArray","priceMin","min","priceMax","max","rating","clearFilter","ReactDOM","render","clicked","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAMeA,MAJf,WACE,OAAO,yBAAKC,UAAU,+B,QCCT,SAASC,IACtB,OACE,yBAAKD,UAAU,2BACf,yBAAKA,UAAU,oBACb,uCAEF,yBAAKA,UAAU,mBACb,0BAAME,GAAG,QAAT,oD,kBCgCSC,MA1Bf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,IAAD,CACEI,SAAS,eACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAW,EACXC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAEd,yBAAKZ,UAAU,cACf,yBAAKA,UAAU,mBACb,kBAACC,EAAD,MACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOY,KAAK,UAAUC,OAAK,EAACC,UAAWhB,QCxB7BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBC,IAAMC,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC5B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAChDC,I,eC6DYF,EAzDC,SAACM,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,sBACH,OAAO,2BACFF,GADL,IAEEG,kBAAkB,GAAD,mBAAMH,EAAMG,mBAAZ,CAA+BF,EAAOG,KAAKC,UAGhE,IAAK,2BACH,OAAO,2BACFL,GADL,IAEEG,kBAAkB,YACbH,EAAMG,kBAAkBG,QACzB,SAACC,GAAD,OAAaA,IAAYN,EAAOG,KAAKC,YAI7C,IAAK,oBACH,OAAO,2BACFL,GADL,IAEEQ,gBAAgB,GAAD,mBAAMR,EAAMQ,iBAAZ,CAA6BP,EAAOG,KAAKC,UAG5D,IAAK,yBACH,OAAO,2BACFL,GADL,IAEEQ,gBAAgB,YACXR,EAAMQ,gBAAgBF,QACvB,SAACC,GAAD,OAAaA,IAAYN,EAAOG,KAAKC,YAI7C,IAAK,kBACH,OAAO,2BACFL,GADL,IAEES,SAAUR,EAAOG,KAAKM,IACtBC,SAAUV,EAAOG,KAAKQ,MAE1B,IAAK,gBACH,OAAO,2BACFZ,GADL,IAEEa,OAAQZ,EAAOG,OAEnB,IAAK,eACH,MAAO,CACLD,kBAAmB,GACnBK,gBAAiB,GACjBC,SAAU,KACVE,SAAU,KACVG,aAAcd,EAAMc,aAGxB,QACE,OAAOd,ICvDbe,IAASC,OACR,kBAAC,EAAD,CAAerB,aDTY,CAC1BQ,kBAAmB,GACnBK,gBAAiB,GACjBM,aAAa,EACbL,SAAU,KACVE,SAAU,KACVE,OAAQ,KACRI,QAAS,MCEiCvB,QAASA,GACnD,kBAAC,EAAD,OAGDwB,SAASC,eAAe,SHsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07bb7434.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ProductDetails() {\r\n  return <div className=\"productDetails__container\"></div>;\r\n}\r\n\r\nexport default ProductDetails;\r\n","import React from 'react';\r\n/**\r\n * @property {Function} - generates a pure functional component\r\n */\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"dashboard__navcontainer\">\r\n    <div className=\"dashboard__title\">\r\n      <h1>Makeup</h1>\r\n    </div>\r\n    <div className=\"dashboard__menu\">\r\n      <span id=\"mtxt\">brands, lipsticks, nailpolish and much more!!!</span>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n// import Dashboard from \"./components/Dashboard\";\r\nimport ProductDetails from \"./components/ProductDetails\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Navbar from \"./components/Navbar.jsx\";\r\nimport \"./sass/Dashboard.sass\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.sass\";\r\n/**\r\n * @file App.js is the root file for this app\r\n * @author Rajat Sawarkar\r\n */\r\n/**\r\n * an app component\r\n * @property {function}\r\n */\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ToastContainer\r\n        position=\"bottom-right\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <div className=\"app__back\"></div>\r\n      <div className=\"dashboard__main\">\r\n        <Navbar />\r\n        <Router>\r\n          {/* <Route path=\"/makeup\" exact component={Dashboard} /> */}\r\n          <Route path=\"/makeup\" exact component={ProductDetails} />\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n\t<StateContext.Provider value={useReducer(reducer, initialState)}>\r\n\t\t{children}\r\n\t</StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const initialState = {\r\n  brandFiltersArray: [],\r\n  tagFiltersArray: [],\r\n  clearFilter: false,\r\n  priceMin: null,\r\n  priceMax: null,\r\n  rating: null,\r\n  clicked: null,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TO_BRAND_FILTER\":\r\n      return {\r\n        ...state,\r\n        brandFiltersArray: [...state.brandFiltersArray, action.item.label],\r\n      };\r\n\r\n    case \"REMOVE_FROM_BRAND_FILTER\":\r\n      return {\r\n        ...state,\r\n        brandFiltersArray: [\r\n          ...state.brandFiltersArray.filter(\r\n            (element) => element !== action.item.label\r\n          ),\r\n        ],\r\n      };\r\n    case \"ADD_TO_TAG_FILTER\":\r\n      return {\r\n        ...state,\r\n        tagFiltersArray: [...state.tagFiltersArray, action.item.label],\r\n      };\r\n\r\n    case \"REMOVE_FROM_TAG_FILTER\":\r\n      return {\r\n        ...state,\r\n        tagFiltersArray: [\r\n          ...state.tagFiltersArray.filter(\r\n            (element) => element !== action.item.label\r\n          ),\r\n        ],\r\n      };\r\n    case \"ADD_PRICE_RANGE\":\r\n      return {\r\n        ...state,\r\n        priceMin: action.item.min,\r\n        priceMax: action.item.max,\r\n      };\r\n    case \"UPDATE_RATING\":\r\n      return {\r\n        ...state,\r\n        rating: action.item,\r\n      };\r\n    case \"CLEAR_FILTER\":\r\n      return {\r\n        brandFiltersArray: [],\r\n        tagFiltersArray: [],\r\n        priceMin: null,\r\n        priceMax: null,\r\n        clearFilter: !state.clearFilter,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from \"./components/StateProvider\";\r\nimport reducer, { initialState } from \"./components/reducer\";\r\n\r\nReactDOM.render(\r\n\t<StateProvider initialState={initialState} reducer={reducer}>\r\n\t\t<App />\r\n\t</StateProvider>,\r\n\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}